在这一章学习了链表，栈和队列。
1.链表
链表概念的提出是为了对抽象数据类型进行编程，链表最主要的是对Next指针的应用，有了Next指针的存在链表可以直接从前一个地址指向下一个地址，并且这两个地址是可以跳越的。header称之为表头，有了
表头我们可以很轻松的找到整条链表。双链表的应用令倒序扫描链表变得方便，同时还简化了删除操作，却因为多给了一倍的指针域，造成空间的浪费。循环链表的应用可以让最后一个单元反过来指向第一个单元。
可适用于圆圈的一系列循环问题。
链表中有许多表操作，如MakeEmpty(List L);IsLast(Position p,List l);Position Advance(Position P)...这些函数的编写符合了程序模块化的需求，同时也对链表的编写起到了促进作用。例如Advance函数
实现对p指针下一位置的访问，有点类似数组中i++的感觉。还有Retrieve的应用实现了对指针所指值的访问，有点类似x=a[i];将数组值提出的感觉...有了这么多函数链表也就可以像数组等结构那样方便地完成
编写。
2.栈
栈是限制插入和删除只能在一个位置上面地表，该位置在表的末端，叫做栈的顶，对栈的基本操作有Push和Pop即进栈和出栈。而栈的顶是唯一可见的元素。对此还要定义一个空值和最大容量，空值是用来检测栈
是不是一个空栈，而最大容量的确立使得栈能够被动态化的确定。类似于链表的函数操作，栈的函数操作也包含着那些相同作用的函数，区别就在与栈最大的特点很多函数的输出值是按着栈的顶元素进行输出。
例如对后缀计法的编写，就鲜明的展现了栈这一数据结构的优越性，当遇到数字是就将其压入栈中，遇到运算符号时就依次弹出最上面的两个元素进行计算，然后再压入栈中。当遇到（时将其压入栈中，再遇到）
时就将（之上的元素全部弹出进行运算。这个原理本质上是对运算优先级的运用而栈的顶元素也是最优先的元素，所以按照运算优先顺序或者排队优先顺序的都可以使用栈进行编程。
3.队列
队列也是一种表，使用队列时插入在一端进行而删除在另一端进行。队列地基本操作时Enqueue，Dequeue入队和出队。队列也可以用数组来实现，只要定一个Rear Front来指向后面和前面地指针，不断地移动
fear和Front就可以实现队列地入队和出队。
有一个形象地例子在大学中地终端占用问题，可以用front指向正在排队地同学，用fear指向用着终端地同学，随着指针不断向前推进，我们总是可以令排最长时间队的人进入终端，令占用终端时间最长地人强制
离开。
